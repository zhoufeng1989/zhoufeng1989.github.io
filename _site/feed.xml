<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">__init__(self)</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2014-02-24T10:18:07+00:00</updated>
<id>/</id>
<author>
  <name>zhoufeng</name>
  <uri>/</uri>
  <email>fengzhou1024@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Grep Summary]]></title>
  <link rel="alternate" type="text/html" href="/Grep-summary/"/>
  <id>/Grep-summary</id>
  <published>2013-09-03T00:00:00+00:00</published>
  <updated>2013-09-03T00:00:00+00:00</updated>
  <author>
    <name>zhoufeng</name>
    <uri></uri>
    <email>fengzhou1024@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;基本用法是:  &lt;br /&gt;
&lt;strong&gt;grep [options] PATTERN [FILES]&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;options&lt;/strong&gt;&lt;br /&gt;
常用的&lt;em&gt;options&lt;/em&gt;有:  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-i  匹配时不区别大小写   &lt;/li&gt;
  &lt;li&gt;-v  不匹配模式&lt;/li&gt;
  &lt;li&gt;-n  显示行数&lt;/li&gt;
  &lt;li&gt;-r  递归查找&lt;/li&gt;
  &lt;li&gt;-l  只显示匹配的字符串所在的文件名,对于查看哪个文件有匹配模式的字符串时有用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上下文相关:    &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-A n after, 显示匹配行以及后面的n行&lt;/li&gt;
  &lt;li&gt;-B n before, 显示匹配行以及之前的n行&lt;/li&gt;
  &lt;li&gt;-C n 显示匹配行以及前后n行，等价于 -A n -B n&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PATTERN&lt;/strong&gt; &lt;br /&gt;
&lt;em&gt;PATTERN&lt;/em&gt;是指定的正则表达式,为了避免正则表达式被shell展开(如 &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;等),比较好的做法是给正则表达式加上引号。  如:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;*cat*&amp;#39;&lt;/span&gt; a.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;grep的正则表达式属于POSIX规范的&lt;a href=&quot;http://www.regular-expressions.info/posix.html&quot;&gt;BRE&lt;/a&gt;流派,字符组(&lt;code&gt;[]&lt;/code&gt;)、锚点(&lt;code&gt;^&lt;/code&gt;(匹配行首)、&lt;code&gt;$&lt;/code&gt;(匹配行尾)、&lt;code&gt;\&amp;lt;&lt;/code&gt;、&lt;code&gt;\&amp;gt;&lt;/code&gt;(匹配单词的起始和结束位置))都无需转义，但是量词中，除了&lt;code&gt;*&lt;/code&gt;以外, 其他量词(&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;{n, m}&lt;/code&gt;)都需要转义才能使用。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 匹配文件a.txt中含有单个数字的行，使用POSIX字符组   &lt;/span&gt;
grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;[[:digit:]]&amp;#39;&lt;/span&gt; a.txt
&lt;span class=&quot;c&quot;&gt;# 匹配文件a.txt中能够匹配单词hello的行&lt;/span&gt;
grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;\&amp;lt;hello\&amp;gt;&amp;#39;&lt;/span&gt; a.txt
&lt;span class=&quot;c&quot;&gt;# 匹配文件a.txt中含有多个连续字母a的行&lt;/span&gt;
grep &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;a&lt;span class=&quot;se&quot;&gt;\{&lt;/span&gt;2,&lt;span class=&quot;se&quot;&gt;\}&lt;/span&gt; a.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;grep支持多选结构，但是必须转义&lt;code&gt;(&lt;/code&gt;、&lt;code&gt;|&lt;/code&gt;、&lt;code&gt;)&lt;/code&gt;,捕获分组的记法是 &lt;code&gt;\1&lt;/code&gt;,&lt;code&gt;\2&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何匹配tab字符&lt;/strong&gt; &lt;br /&gt;
&lt;em&gt;POSIX regular expression&lt;/em&gt;没有将&lt;em&gt;tab&lt;/em&gt;映射为&lt;em&gt;\t&lt;/em&gt;,&lt;em&gt;grep&lt;/em&gt;中如何搜索&lt;em&gt;tab&lt;/em&gt;呢?   &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用&lt;em&gt;perl&lt;/em&gt;风格的正则表达式    &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    grep -P &lt;span class=&quot;s1&quot;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; a.txt
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用&lt;code&gt;echo&lt;/code&gt;直接输出的tab     &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(echo -ne \\t)&amp;quot;&lt;/span&gt; a.txt
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CTRL+V tab: CTRL+V 使接下来的输入的字符失去特殊意义&lt;/li&gt;
  &lt;li&gt;如果用的是&lt;em&gt;Bash shell&lt;/em&gt;, 还可以用&lt;a href=&quot;http://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html#ANSI_002dC-Quoting&quot;&gt;ansi c quoting&lt;/a&gt;这个特性&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    grep &lt;span class=&quot;s1&quot;&gt;$&amp;#39;\t&amp;#39;&lt;/span&gt; a.txt
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;/Grep-summary/&quot;&gt;Grep Summary&lt;/a&gt; was originally published by zhoufeng at &lt;a href=&quot;&quot;&gt;__init__(self)&lt;/a&gt; on September 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[test]]></title>
  <link rel="alternate" type="text/html" href="/test/"/>
  <id>/test</id>
  <published>2013-06-10T00:00:00+00:00</published>
  <updated>2013-06-10T00:00:00+00:00</updated>
  <author>
    <name>zhoufeng</name>
    <uri></uri>
    <email>fengzhou1024@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;useful-python-command-options&quot;&gt;Useful Python command options&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;-c command&lt;/strong&gt;: specify the command to execute, This terminates the option list(following options are passed as arguments to the command).    &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python --version           
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Python 2.7.2
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;import sys; print sys.argv&amp;#39;&lt;/span&gt; --version
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&amp;#39;--version&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# --version is passed as argument&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;test
&lt;strong&gt;for example&lt;/strong&gt;, we hava a Python script, called test.py:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;key error here!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;/test/&quot;&gt;test&lt;/a&gt; was originally published by zhoufeng at &lt;a href=&quot;&quot;&gt;__init__(self)&lt;/a&gt; on June 10, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Useful Python command options]]></title>
  <link rel="alternate" type="text/html" href="/Useful-Python-command-options/"/>
  <id>/Useful-Python-command-options</id>
  <published>2013-06-09T00:00:00+00:00</published>
  <updated>2013-06-09T00:00:00+00:00</updated>
  <author>
    <name>zhoufeng</name>
    <uri></uri>
    <email>fengzhou1024@gmail.com</email>
  </author>
  <content type="html">&lt;h1 id=&quot;useful-python-command-options&quot;&gt;Useful Python command options&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;-c command&lt;/strong&gt;: specify the command to execute, This terminates the option list(following options are passed as arguments to the command).    &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python --version           
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Python 2.7.2
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;import sys; print sys.argv&amp;#39;&lt;/span&gt; --version
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&amp;#39;--version&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# --version is passed as argument&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;-i&lt;/strong&gt;: When a script is passed as first argument or the -c option is used, enter interactive mode after executing the script or the command. It does not read the $PYTHONSTARTUP file.This can be useful to inspect global variables or a stack trace when a script raises an exception. &lt;/p&gt;

    &lt;p&gt;for example, we hava a Python script, called test.py:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;key error here!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;then execute:    
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -i test.py
    &amp;gt;&amp;gt;&amp;gt; print x
    1
    &amp;gt;&amp;gt;&amp;gt; print e
    KeyError&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;key error here!&amp;#39;&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;-m module_name&lt;/strong&gt;: Searches sys.path for the named module and runs the corresponding .py file as a script.
 for example:   &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    calendar:

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m calendar  &lt;span class=&quot;c&quot;&gt;# shows the calendar of current year&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m calendar y m  &lt;span class=&quot;c&quot;&gt;# shows the calendar of the month m in year y&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m calendar -h &lt;span class=&quot;c&quot;&gt;# -h option for more helps&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    zipfile:

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m zipfile
     Usage:
        zipfile.py -l zipfile.zip        &lt;span class=&quot;c&quot;&gt;# Show listing of a zipfile&lt;/span&gt;
        zipfile.py -t zipfile.zip        &lt;span class=&quot;c&quot;&gt;# Test if a zipfile is valid&lt;/span&gt;
        zipfile.py -e zipfile.zip target &lt;span class=&quot;c&quot;&gt;# Extract zipfile into target dir&lt;/span&gt;
        zipfile.py -c zipfile.zip src ... &lt;span class=&quot;c&quot;&gt;# Create zipfile from sources&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    json

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;a&amp;quot;:&amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;: &amp;quot;d&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; python -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;json.tool&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    http server: start a http server in current directory, convenient to share files.

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;SimpleHTTPServer&amp;#39;&lt;/span&gt; 1234
    Serving HTTP on 0.0.0.0 port 1234 ...

    also an CGI version:
    
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m CGIHTTPServer 1234
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    pydoc:

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m pydoc
    pydoc - the Python documentation tool

    pydoc.py &amp;lt;name&amp;gt; ...
        Show text documentation on something.  &amp;lt;name&amp;gt; may be the name of a
        Python keyword, topic, &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;, module, or package, or a dotted
        reference to a class or &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;within a module or module in a
        package.  
        If &amp;lt;name&amp;gt; contains a &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, it is used as the path to a
        Python &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;file to document. If name is &lt;span class=&quot;s1&quot;&gt;&amp;#39;keywords&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&amp;#39;topics&amp;#39;&lt;/span&gt;,
        or &lt;span class=&quot;s1&quot;&gt;&amp;#39;modules&amp;#39;&lt;/span&gt;, a listing of these things is displayed.

    pydoc.py -k &amp;lt;keyword&amp;gt; &lt;span class=&quot;c&quot;&gt;#maybe slow&lt;/span&gt;
        Search &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a keyword in the synopsis lines of all available modules.

    pydoc.py -p &amp;lt;port&amp;gt;  &lt;span class=&quot;c&quot;&gt;# only for localhost&lt;/span&gt;
        Start an HTTP server on the given port on the &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;machine.

    pydoc.py -g
        Pop up a graphical interface &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;finding and serving documentation.

    pydoc.py -w &amp;lt;name&amp;gt; ...
        Write out the HTML documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a module to a file in the current
         directory.  If &amp;lt;name&amp;gt; contains a &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, it is treated as a filename&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;it names a directory, documentation is written &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;all the contents.
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    pdb:debug python programes step by step

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m pdb scripname &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;arg&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ... 
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    doctest:

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m doctest scriptname
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    timeit:

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m timeit
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    filecmp: compare two directories:

    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m filecmp dir1 dir2
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;At last , the Zen of Python:
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python -m this
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;resources&quot;&gt;resources:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;the &lt;a href=&quot;https://pypi.python.org/pypi/e&quot;&gt;e module&lt;/a&gt;. like &lt;code&gt;python -c command&lt;/code&gt;, but more powerful.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14545001/what-tools-are-available-in-python-standard-library/14545364&quot;&gt;stackoverflow&lt;/a&gt; discussion.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/pyp/&quot;&gt;Pyp&lt;/a&gt; is a linux command line text manipulation tool similar to awk or sed, but which uses standard python string and list methods as well as custom functions evolved to generate fast results in an intense production environment.&lt;/li&gt;
&lt;/ol&gt;

  &lt;p&gt;&lt;a href=&quot;/Useful-Python-command-options/&quot;&gt;Useful Python command options&lt;/a&gt; was originally published by zhoufeng at &lt;a href=&quot;&quot;&gt;__init__(self)&lt;/a&gt; on June 09, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Shell hot keys]]></title>
  <link rel="alternate" type="text/html" href="/Shell-hot-keys/"/>
  <id>/Shell-hot-keys</id>
  <published>2013-01-18T00:00:00+00:00</published>
  <updated>2013-01-18T00:00:00+00:00</updated>
  <author>
    <name>zhoufeng</name>
    <uri></uri>
    <email>fengzhou1024@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;shell 下的常用热键，在bash与zsh测试均可用，分类总结如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Move&lt;/strong&gt;:  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ctrl+f forward one character&lt;/li&gt;
  &lt;li&gt;Ctrl+b back one character&lt;/li&gt;
  &lt;li&gt;Escape+f forward one word&lt;/li&gt;
  &lt;li&gt;Escape+b back one word&lt;/li&gt;
  &lt;li&gt;Ctrl+a start of line&lt;/li&gt;
  &lt;li&gt;Ctrl+e end of line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Search&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ctrl-r does a search in the previously given commands so that you don’t have to repeat long command. &lt;/li&gt;
  &lt;li&gt;Ctrl+p previous line in history&lt;/li&gt;
  &lt;li&gt;Ctrl+n next line in history&lt;/li&gt;
  &lt;li&gt;Ctrl+g cancel (cancels search, goes back to original command)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Delete&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ctrl+d delete char to right&lt;/li&gt;
  &lt;li&gt;Ctrl+u delete to start of line from current position (works in bash, in zsh, empty the entire line)&lt;/li&gt;
  &lt;li&gt;Ctrl+k delete to end of line from current position&lt;/li&gt;
  &lt;li&gt;Ctrl+w delete the word before the cursor&lt;/li&gt;
  &lt;li&gt;Escape+d delete the word after the cursor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Modify&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ctrl+t Transpose (exchange) the character at the cursor location with the one preceding it.&lt;/li&gt;
  &lt;li&gt;Escape+t Transpose the word at the cursor location with the one preceding it.&lt;/li&gt;
  &lt;li&gt;Escape+l Convert the characters from the cursor location to the end of theword to lowercase.&lt;/li&gt;
  &lt;li&gt;Escape+u Convert the characters from the cursor location to the end of the word to upcase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ctrl-l – clear screen &lt;/li&gt;
  &lt;li&gt;ctrl-c – kills the current command or process. &lt;/li&gt;
  &lt;li&gt;ctrl-d – kills the shell. (没有输入时)&lt;/li&gt;
  &lt;li&gt;ctrl-z – puts the currently running process in background, the process can be brought back to run state by using fg command. &lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/Shell-hot-keys/&quot;&gt;Shell hot keys&lt;/a&gt; was originally published by zhoufeng at &lt;a href=&quot;&quot;&gt;__init__(self)&lt;/a&gt; on January 18, 2013.&lt;/p&gt;</content>
</entry>

</feed>
